int = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
float = @{ int ~ "." ~ ASCII_DIGIT* }
ident = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC|"_")* }
function_call = ${ ident ~ args }
	args = !{"("~expression_list~")"}
var = _{ float | int | array | array_repeat | string | function | void | tuple }
not = { "!" ~ ( logic_arg )}
bin_not = { "~" ~ logic_arg }
logic_arg = _{ exp_in_brackets | function_call | ident | int | array | array_repeat }
equal = { equal_arg ~ "==" ~ equal_arg }
not_equal = { equal_arg ~ "!=" ~ equal_arg }
  equal_arg = _{ math_operations | not | bin_not | exp_in_brackets | function_call | var | ident }
exp_in_brackets = _{ "(" ~ ( math_operations | math_arg | equal | not_equal | and | or | bin_and | bin_or | xor | shift ) ~ ")" }
and = { logic_arg ~ "&&" ~ logic_arg }
or = { logic_arg ~ "||" ~ logic_arg }
bin_and = { logic_arg ~ "&" ~ logic_arg }
bin_or = { logic_arg ~ "|" ~ logic_arg }
xor = { logic_arg ~ "^" ~ logic_arg }
lshift = { logic_arg ~ "<<" ~ logic_arg }
rshift = { logic_arg ~ ">>" ~ logic_arg }
shift = _{ lshift | rshift }
greater = { math_arg ~ ">" ~ math_arg }
greater_equal = { math_arg ~ ">=" ~ math_arg }
lower = { math_arg ~ "<" ~ math_arg }
lower_equal = { math_arg ~ "<=" ~ math_arg }
math_arg = _{ float | logic_arg }
pow = { math_arg ~ "**" ~ math_arg }
multiply = { math_arg ~ "*" ~ math_arg }
divide = { math_arg ~ "/" ~ math_arg }
add = { ( math_arg | string ) ~ "+" ~ ( math_arg | string ) }
subtract = { math_arg ~ "-" ~ math_arg }
modulo = { logic_arg ~ "%" ~ logic_arg }
comparasion = _{ equal | not_equal | greater | greater_equal | lower | lower_equal }
math_operations = _{ pow | modulo | multiply | divide | add | subtract }
block = { "{" ~ line* ~ "}" }
if_else = { "if" ~ expression ~ expression ~ "else" ~ expression }
if_stm = { "if" ~ expression ~ expression }
set_if_else = { "if" ~ ident ~ ":" ~ type ~ "=" ~ expression ~ expression ~ "else" ~ expression }
set_if = { "if" ~ ident ~ ":" ~ type ~ "=" ~ expression ~ expression }
match = { "match" ~ expression ~  "{" ~ match_arm* ~ "}" }
  match_arm = _{ match_type | match_value | match_other }
  match_type = { ident ~ ":" ~ type ~ "=>" ~ expression ~ "," }
  match_value = { values ~ "=>" ~ expression ~ "," }
  match_other = { "=>" ~ expression ~ "," }
  values = { expression+ }
at = { ( add | function_call | ident | array | array_repeat | string ) ~ "[" ~ expression ~ "]"  }
import = { "import" ~ string }
map = { ( ident | array | array_repeat | function_call | tuple ) ~ "@" ~ expression }
filter = { ( ident | array | array_repeat | function_call ) ~ "?" ~ expression }
type_filter = { ( ident | array | array_repeat | function_call ) ~ "?" ~ type }
expression = _{ type_filter | filter | map | import | match | set_if_else | set_if | at | if_else
  | if_stm | comparasion | math_operations | not | bin_not | and | or | bin_and | bin_or | xor
  | shift | function_call | ident | exp_in_brackets | var | block  }
expression_list = _{ (expression ~ ("," ~ expression)*)?}
array = {"[" ~ expression_list ~ "]"}
array_repeat = {"[" ~ expression ~ ";" ~ expression ~ "]"}
string = ${ "\"" ~ inner ~ "\"" }
  inner = @{ char* }
  char = {
      !("\"" | "\\") ~ ANY
      | "\\" ~ ("\"" | "\\" | "b" | "f" | "n" | "r" | "t")
      | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
  }
void = {"()"}
function_declaration = { ident ~ "=" ~ function }
set = { ident ~ "=" ~ expression }
destruct_tuple = { destruct_idents ~ "=" ~ expression }
  destruct_idents =  {"(" ~ (ident ~ ("," ~ ident)*)? ~ ")"}
line = { COMMENT* ~ ( ( ( function_declaration | set | destruct_tuple | expression ) ~  line_end?) | block ) }
	line_end = { ";" }
function = {params ~ return_type_decl? ~"{"~line*~"}"}
	param = {ident ~ ":" ~ type}
	params_list = _{ (param ~ ("," ~ param)*)?}
    params = {"(" ~ params_list? ~ ")"}
  return_type_decl = {("->" ~ type | return_type)}
tuple =  {"(" ~ (expression ~ ("," ~ expression)+)? ~ ")"}
type = _{ multi | standard_types | any }
  int_type = {"int"}
  float_type = {"float"}
  string_type = {"string"}
  void_type = {"()"}
  function_type = {"function" ~ function_type_params? ~ ("->" ~ return_type)?}
    function_type_params = {"(" ~ (type ~ ("," ~ type)*)? ~ ")"}
    return_type = _{ standard_types | any | "(" ~ multi ~ ")" }
  array_type = { "[" ~ type ~ "]" }
  tuple_type = {"(" ~ (type ~ ("," ~ type)+)? ~ ")"}
  standard_types = _{ int_type | float_type | string_type | void_type | function_type | array_type | tuple_type }
  multi = { ( standard_types ) ~ ( "|" ~ standard_types )+ }
  any = {"any"}
input = _{ line* ~ EOI}
block_comment = _{"/*" ~ (!"*/" ~ ANY)* ~ "*/"}
line_comment = _{"//"~(!NEWLINE ~ ANY)*}
COMMENT = _{block_comment|line_comment}
WHITESPACE = _{ " " | "\t"| NEWLINE }