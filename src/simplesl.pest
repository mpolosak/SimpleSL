ident = @{ !("return"~!(ASCII_ALPHANUMERIC|"_")) ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC|"_")* }
only_var = _{var ~ &EOI}
var = _{ float | int | array | array_repeat | string | function | void | tuple }
  function = {params ~ return_type_decl? ~"{"~line*~"}"}
  param = {ident ~ ":" ~ type}
  params_list = _{ (param ~ ("," ~ param)*)?}
    params = {"(" ~ params_list? ~ ")"}
  return_type_decl = {("->" ~ type | return_type)}
  tuple =  {"(" ~ (expr ~ ("," ~ expr)+) ~ ")"}
  int = ${ binary_int | octal_int | hexadecimal_int | decimal_int }
    binary_int = ${ "0b" ~ binary }
      binary = @{ "_"* ~ ASCII_BIN_DIGIT ~ ( ASCII_BIN_DIGIT | "_" )* }
    octal_int = $ { "0o" ~ octal }
      octal = @{ "_"* ~ ASCII_OCT_DIGIT ~ ( ASCII_OCT_DIGIT | "_" )* }
    decimal_int = ${ decimal }
      decimal = @{ ASCII_DIGIT ~ ( ASCII_DIGIT | "_" )* }
    hexadecimal_int = $ { "0x" ~ hexadecimal }
      hexadecimal = @{ "_"* ~ ASCII_HEX_DIGIT ~ ( ASCII_HEX_DIGIT | "_" )* }
  float = @{ ( decimal ~ ("." ~ decimal)? ~ ("e"|"E") ~ ("+"|"-")? ~ "_"* ~ decimal) | (decimal ~ "." ~ decimal) }
  void = {"()"}
  array = {"[" ~ expression_list ~ "]"}
  array_repeat = {"[" ~ expr ~ ";" ~ expr ~ "]"}
  string = ${ "\"" ~ inner ~ quotation_mark }
    quotation_mark = {"\""}
    inner = @{ char* }
    char = {
        !("\"" | "\\") ~ ANY
        | "\\" ~ ANY
    }
primary = _{ ident | var | expr_in_brackets }
  expr_in_brackets = _{ "(" ~ expr ~ ")" }
atom = _{ prefix_op? ~ primary ~ postfix_op? }
expr = { (atom ~ (bin_op ~ atom)*) }
bin_op = _{ lshift | rshift | comp | and | or | bitwise_and | bitwise_or | xor | pow | multiply | divide | add | subtract | modulo
            | map | filter | reduce }
  comp = _{ equal | not_equal | greater_equal | greater | lower_equal | lower }
    equal = { "==" }
    not_equal = { "!=" }
    lshift = { "<<" }
    rshift = { ">>" }
    greater = { ">" }
    greater_equal = { ">=" }
    lower = { "<" }
    lower_equal = { "<=" }
  and = { "&&" }
  or = { "||" }
  bitwise_and = { "&" }
  bitwise_or = { "|" }
  xor = { "^" }
  pow = { "**" }
  multiply = { "*" }
  divide = { "/" }
  add = { "+" }
  subtract = { "-" }
  modulo = { "%" }
  map = { "@" }
  filter = { "?" }
  reduce = { "$" ~ expr }
prefix_op = _{not | bitwise_not | unary_minus }
  not = { "!" }
  bitwise_not = { "~" }
  unary_minus = { "-" }
postfix_op = _{ type_filter | at | function_call | sum | product | all | reduce_any | bitand_reduce | bitor_reduce  }
  type_filter = { "?" ~ type }
  at = { "[" ~ expr ~ "]"  }
  function_call = {"("~expression_list~")"}
  sum = { "$+" }
  product = { "$*" }
  all = { "$&&" }
  reduce_any = { "$||" }
  bitand_reduce = { "$&" }
  bitor_reduce = { "$|" }
stm = _{ block | if_else | set_if_else | match | import | return | expr }
  block = { "{" ~ line* ~ "}" }
  body = _{ block | return | expr }
  if_else = { "if" ~ expr ~ body ~ ("else" ~ stm)? }
  set_if_else = { "if" ~ ident ~ ":" ~ type ~ "=" ~ expr ~ body ~ ("else" ~ stm)? }
  match = { "match" ~ expr ~  "{" ~ match_arm* ~ "}" }
    match_arm = _{ match_type | match_value | match_other }
    match_type = { ident ~ ":" ~ type ~ "=>" ~ body ~ "," }
    match_value = { values ~ "=>" ~ body ~ "," }
    match_other = { "=>" ~ body ~ "," }
    values = _{ (expr ~ ("," ~ expr)*)}
  import = { "import" ~ string }
  return = { "return" ~ stm? }
expression_list = _{ (expr ~ ("," ~ expr)*)?}
line = _{ COMMENT* ~ (( return | function_declaration | set | destruct_tuple | stm ) ~  line_end?) }
	line_end = _{ ";" }
  function_declaration = { ident ~ "=" ~ function }
  set = { ident ~ "=" ~ stm}
  destruct_tuple = { destruct_idents ~ "=" ~ stm }
    destruct_idents =  {"(" ~ (ident ~ ("," ~ ident)*)? ~ ")"}
type = _{ multi | standard_types }
  int_type = {"int"}
  float_type = {"float"}
  string_type = {"string"}
  function_type = {function_type_params ~ "->" ~ return_type}
    function_type_params = {"(" ~ (type ~ ("," ~ type)*)? ~ ")"}
    return_type = _{ standard_types | "(" ~ multi ~ ")" }
  array_type = { "[" ~ type ~ "]" }
  tuple_type = {"(" ~ (type ~ ("," ~ type)+) ~ ")"}
  standard_types = _{ int_type | float_type | string_type | function_type | void | array_type | tuple_type | any }
  multi = { ( standard_types ) ~ ( "|" ~ standard_types )+ }
  any = {"any"}
input = _{ line* ~ &EOI}
block_comment = _{"/*" ~ (!"*/" ~ ANY)* ~ "*/"}
line_comment = _{"//"~(!NEWLINE ~ ANY)*}
COMMENT = _{block_comment|line_comment}
WHITESPACE = _{ " " | "\t"| NEWLINE }