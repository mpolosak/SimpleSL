int = { ("+" | "-")? ~ ASCII_DIGIT+ }
float = @{ int ~ "." ~ ASCII_DIGIT* }
ident = @{ !null ~ (ASCII_ALPHA | "_") ~ (ASCII_ALPHANUMERIC|"_")* }
function_call = ${ ident ~ args }
	args = !{"("~expression_list~")"}
var = _{ float | int | array | string | null | function }
not = { "!" ~ ( logic_arg )}
bin_not = { "~" ~ logic_arg }
logic_arg = _{ exp_in_brackets | function_call | ident | int }
equal = { equal_arg ~ "==" ~ equal_arg }
not_equal = { equal_arg ~ "!=" ~ equal_arg }
  equal_arg = _{ math_operations | not | bin_not | exp_in_brackets | function_call | var | ident }
exp_in_brackets = _{ "(" ~ ( math_operations | math_arg | equal | not_equal | and | or | bin_and | bin_or | xor) ~ ")" }
and = { logic_arg ~ "&&" ~ logic_arg }
or = { logic_arg ~ "||" ~ logic_arg }
bin_and = { logic_arg ~ "&" ~ logic_arg }
bin_or = { logic_arg ~ "|" ~ logic_arg }
xor = { logic_arg ~ "^" ~ logic_arg }
greater = { math_arg ~ ">" ~ math_arg }
greater_equal = { math_arg ~ ">=" ~ math_arg }
lower = { math_arg ~ "<" ~ math_arg }
lower_equal = { math_arg ~ "<=" ~ math_arg }
math_arg = _{ exp_in_brackets | float | logic_arg }
multiply = { math_arg ~ "*" ~ math_arg }
divide = { math_arg ~ "/" ~ math_arg }
add = { math_arg ~ "+" ~ math_arg }
subtract = { math_arg ~ "-" ~ math_arg }
modulo = { logic_arg ~ "%" ~ logic_arg }
comparasion = _{ equal | not_equal | greater | greater_equal | lower | lower_equal }
math_operations = _{ modulo | multiply | divide | add | subtract }
expression = _{ exp_in_brackets | comparasion | math_operations | not | bin_not | and | or | bin_and | bin_or | xor | function_call | ident | var }
expression_list = _{ (expression ~ ("," ~ expression)*)?}
array = {"{" ~ expression_list ~ "}"}
string = ${ "\"" ~ inner ~ "\"" }
  inner = @{ char* }
  char = {
      !("\"" | "\\") ~ ANY
      | "\\" ~ ("\"" | "\\" | "b" | "f" | "n" | "r" | "t")
      | "\\" ~ ("u" ~ ASCII_HEX_DIGIT{4})
  }
null = {"NULL"}
set = { return_variable ~ "=" ~ expression }
line = { COMMENT* ~ (set | expression) ~  line_end }
	line_end = { ";" }
return_variable = @{ident}
function = {params~"{"~line*~"}"}
	param = {ident ~ ":" ~ type}
	params_list = _{ (param ~ ("," ~ param)*)?}
    params = {"(" ~ params_list? ~ ")"}
type = _{int_type | float_type | string_type | null_type | function_type | array_type | any}
  int_type = {"int"}
  float_type = {"float"}
  string_type = {"string"}
  null_type = {"null"}
  function_type = {"function" ~ function_type_params? ~ ("->" ~ type)?}
    function_type_params = {"(" ~ (type ~ ("," ~ type)*)? ~ ")"}
  array_type = {"array"}
  any = {"any"}
input = _{ line* ~ EOI}
block_comment = _{"/*" ~ (!"*/" ~ ANY)* ~ "*/"}
line_comment = _{"//"~(!NEWLINE ~ ANY)*}
COMMENT = _{block_comment|line_comment}
WHITESPACE = _{ " " | "\t"| NEWLINE }